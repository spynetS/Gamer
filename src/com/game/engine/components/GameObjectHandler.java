// Generated by delombok at Sun Jan 19 19:44:26 CET 2025
package com.game.engine.components;

import com.game.engine.GameObject;
import com.game.engine.msc.Debug;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;

/**
 * GameObjectHandler is a class that handles adding removing gameobjecits and components in the world.
 * We can not just add components and gameobjects on the scripts because it is manipulating that list
 * so we do it after the update cycle is done.
 */
public class GameObjectHandler {
    HashMap<GameObject, GameObject> addChildren = new HashMap<>();
    HashMap<GameObject, GameObject> removeChildren = new HashMap<>();
    HashMap<GameObject, Component> addComponent = new HashMap<>();
    HashMap<GameObject, Component> removeComponent = new HashMap<>();
    LinkedList<GameObject> addGameObject = new LinkedList<>();
    LinkedList<GameObject> removeGameObject = new LinkedList<>();

    public void instantiate(GameObject gameObject) {
        addGameObject.add(gameObject);
    }

    public void instantiate(GameObject child, GameObject parent) {
        addChildren.put(parent, child);
    }

    public void addComponent(Component component, GameObject gameObject) {
        addComponent.put(gameObject, component);
    }

    public ArrayList<GameObject> update(ArrayList<GameObject> gameObjects) {
        if (addGameObject.size() > 0) {
            gameObjects.addAll(addGameObject);
            addGameObject.clear();
        }
        if (addComponent.size() > 0) {
            for (Map.Entry<GameObject, Component> entry : addComponent.entrySet()) {
                entry.getKey().addComp(entry.getValue());
            }
            addComponent.clear();
        }
        if (addChildren.size() > 0) {
            for (Map.Entry<GameObject, GameObject> entry : addChildren.entrySet()) {
                entry.getKey().addChild(entry.getValue());
            }
            addChildren.clear();
        }
        return gameObjects;
    }



    public HashMap<GameObject, GameObject> getAddChildren() {
        return this.addChildren;
    }



    public void setAddChildren(final HashMap<GameObject, GameObject> addChildren) {
        this.addChildren = addChildren;
    }



    public HashMap<GameObject, GameObject> getRemoveChildren() {
        return this.removeChildren;
    }



    public void setRemoveChildren(final HashMap<GameObject, GameObject> removeChildren) {
        this.removeChildren = removeChildren;
    }



    public HashMap<GameObject, Component> getAddComponent() {
        return this.addComponent;
    }



    public void setAddComponent(final HashMap<GameObject, Component> addComponent) {
        this.addComponent = addComponent;
    }



    public HashMap<GameObject, Component> getRemoveComponent() {
        return this.removeComponent;
    }



    public void setRemoveComponent(final HashMap<GameObject, Component> removeComponent) {
        this.removeComponent = removeComponent;
    }



    public LinkedList<GameObject> getAddGameObject() {
        return this.addGameObject;
    }



    public void setAddGameObject(final LinkedList<GameObject> addGameObject) {
        this.addGameObject = addGameObject;
    }



    public LinkedList<GameObject> getRemoveGameObject() {
        return this.removeGameObject;
    }



    public void setRemoveGameObject(final LinkedList<GameObject> removeGameObject) {
        this.removeGameObject = removeGameObject;
    }
}
