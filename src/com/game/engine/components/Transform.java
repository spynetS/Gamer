// Generated by delombok at Sun Jan 19 19:44:26 CET 2025
package com.game.engine.components;

import com.game.engine.GameEngine;
import com.game.engine.GameObject;
import com.game.engine.msc.Debug;
import com.game.engine.msc.Vector2;

/**
 * The transform class is the base of the GameObjects form.
 * It is the position rotation scale and parenting.
 */
public class Transform extends Component {
    private Vector2 globalPosition = new Vector2();
    private Vector2 localPosition = new Vector2();
    private float localRotation = 0.0F;
    private float rotation = 0.0F;
    private Vector2 rotationOffset = new Vector2();
    private Vector2 localScale = new Vector2(1, 1);
    private Vector2 globalScale = new Vector2(100, 100);
    private GameObject gameObject;
    private GameObject parent;
    private Vector2 scalePositionThing = new Vector2(0, 0);

    public Transform(GameObject gameObject) {
        this.gameObject = gameObject;
    }

    public Vector2 getGlobalPosition() {
        //rotationOffset.adds();
        return globalPosition.add(rotationOffset.multiply(scalePositionThing));
    }

    public Vector2 getGlobalScale() {
        if (localScale.equals(Vector2.zero)) return new Vector2(1, 1);
        return globalScale.add(localScale);
    }

    public Vector2 getScale() {
        return globalScale;
    }

    public void setScale(Vector2 scale) {
        if (parent == null) {
            setScaleFactor(scale.divide(globalScale));
        } else {
            if (localScale.containsZero()) {
                localScale = scale;
            }
            setScaleFactor(scale.divide(localScale));
            localScale = scale;
        }
    }

    public void setScaleFactor(Vector2 factor) {
        if (factor.getX() > 0 && factor.getY() > 0) {
            globalScale = globalScale.multiply(factor);
            //scale children
            for (GameObject g : gameObject.gameObjects) {
                g.transform.setScaleFactor(factor);
            }
        }
    }

    /**
     * Translates (changes postion) with delta time (takes in to account framerate)
     * @param translation the amount to change
     */
    public void translate(Vector2 translation) {
        float factor = 100;
        setPosition(getPosition().add(translation.multiply(GameEngine.deltaTime).multiply(factor)));
    }

    public Vector2 getPosition() {
        if (parent == null) return globalPosition;
        return localPosition;
    }

    public void setPosition(Vector2 position) {
        if (parent == null) globalPosition = position;
         else {
            localPosition = position.subtract(parent.transform.getPosition());
        }
    }

    public float getRotation() {
        return rotation + localRotation;
    }

    public void setRotation(float rotation) {
        if (parent != null) {
            this.localRotation = rotation;
        } else this.rotation = rotation;
    }

    @Override
    public void update() {
        super.update();
        //update parent values
        if (parent != null) {
            //update position based on the parent
            globalPosition = parent.transform.getGlobalPosition();
            //update scale based on parent
            globalScale = parent.transform.getScale().add(localScale);
            //this is for parent scaling so the object moves when parent scales
            if (!localScale.containsZero()) scalePositionThing = (globalScale.divide(localScale)).divide(10);
            scalePositionThing = new Vector2(1, 1);
            //calculate the rotation offset so the child rotates around the parent
            double rotation = Math.toRadians(parent.transform.getRotation());
            this.rotation = parent.transform.getRotation();
            float x = localPosition.getX();
            float y = localPosition.getY();
            //rotationOffset is the localpostion based on the rotation
            rotationOffset = new Vector2((float) (x * Math.cos(rotation) - y * Math.sin(rotation)), (float) (x * Math.sin(rotation) + y * Math.cos(rotation)));
        }
    }

    @Override
    public void start() {
        if (parent != null) globalScale = parent.transform.getGlobalScale().add(localScale);
        super.start();
    }

    @Override
    public String toString() {
        return "Transform{" + "globalPosition=" + getGlobalPosition() + ", \nlocalPosition=" + localPosition + ", \nrotation=" + rotation + ", \nlocalScale=" + localScale + ", \nglobalScale=" + getGlobalScale() + ", \ngameObject=" + gameObject + ", \nparent=" + parent + ", \nscalePositionThing=" + scalePositionThing + '}';
    }



    public void setGlobalPosition(final Vector2 globalPosition) {
        this.globalPosition = globalPosition;
    }



    public Vector2 getLocalPosition() {
        return this.localPosition;
    }



    public void setLocalPosition(final Vector2 localPosition) {
        this.localPosition = localPosition;
    }



    public float getLocalRotation() {
        return this.localRotation;
    }



    public void setLocalRotation(final float localRotation) {
        this.localRotation = localRotation;
    }



    public Vector2 getLocalScale() {
        return this.localScale;
    }



    public void setLocalScale(final Vector2 localScale) {
        this.localScale = localScale;
    }



    public void setGlobalScale(final Vector2 globalScale) {
        this.globalScale = globalScale;
    }



    public GameObject getGameObject() {
        return this.gameObject;
    }



    public void setGameObject(final GameObject gameObject) {
        this.gameObject = gameObject;
    }



    public GameObject getParent() {
        return this.parent;
    }



    public void setParent(final GameObject parent) {
        this.parent = parent;
    }
}
