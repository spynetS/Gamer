// Generated by delombok at Sun Jan 19 19:44:26 CET 2025
package com.game.engine.physics;

import com.game.engine.GameEngine;
import com.game.engine.components.Component;
import com.game.engine.msc.Debug;
import com.game.engine.msc.Vector2;
import com.game.engine.physics.PhysicsWorld;


public class Rigidbody extends Component {
    private boolean isFreeze = false;
    private Vector2 velocity = new Vector2();
    private float angularVelocity = 0.0F;
    private float inertia = 0.0F;
    private float linerDrag = 0.001F;
    private float angularDrag = 0.0F;
    private Vector2 centerOfMass = new Vector2(); //point where the center of mass is
    private float mass = 1.0F; // 1 is one kg
    private boolean useGravity = false;
    private float gravitationalScale = 1.0F;

    public Rigidbody(boolean useGravity) {
        this.useGravity = useGravity;
    }

    public void addForce(Vector2 force) {
        Vector2 a = force.divide(mass);
        velocity.adds(a.multiply(GameEngine.deltaTime).multiply(100));
    }

    private void updateInertia() {
        float i = (float) ((1 / 12) * mass * (Math.pow(transform.getScale().getX(), 2) + Math.pow(transform.getPosition().getY(), 2)));
        setInertia(i);
    }

    public void resolveCollision(Rigidbody other) {
        Rigidbody me = this;
        if (other == null) {
        } else {
        }
    }

    @Override
    public void update() {
        updateInertia();
        //rotate by angular velocity
        transform.setRotation((float) (transform.getRotation() + (angularVelocity * GameEngine.deltaTime)));
        //add linerdrag force
        addForce(velocity.multiply(-linerDrag));
        if (useGravity) {
            velocity = velocity.add(PhysicsWorld.g.divide(gravitationalScale).multiply(GameEngine.deltaTime));
        }
        //update transforms position based on velocity
        transform.setPosition(transform.getPosition().add(velocity.multiply(GameEngine.deltaTime)));
    }

    @Override
    public String toString() {
        return "Rigidbody{" + "velocity=" + velocity + ", angularVelocity=" + angularVelocity + ", inertia=" + inertia + ", linerDrag=" + linerDrag + ", angularDrag=" + angularDrag + ", centerOfMass=" + centerOfMass + ", mass=" + mass + ", gravitationalScale=" + gravitationalScale + '}';
    }



    public Rigidbody(final boolean isFreeze, final Vector2 velocity, final float angularVelocity, final float inertia, final float linerDrag, final float angularDrag, final Vector2 centerOfMass, final float mass, final boolean useGravity, final float gravitationalScale) {
        this.isFreeze = isFreeze;
        this.velocity = velocity;
        this.angularVelocity = angularVelocity;
        this.inertia = inertia;
        this.linerDrag = linerDrag;
        this.angularDrag = angularDrag;
        this.centerOfMass = centerOfMass;
        this.mass = mass;
        this.useGravity = useGravity;
        this.gravitationalScale = gravitationalScale;
    }



    public Rigidbody() {
    }



    public boolean isFreeze() {
        return this.isFreeze;
    }



    public void setFreeze(final boolean isFreeze) {
        this.isFreeze = isFreeze;
    }



    public Vector2 getVelocity() {
        return this.velocity;
    }



    public void setVelocity(final Vector2 velocity) {
        this.velocity = velocity;
    }



    public float getAngularVelocity() {
        return this.angularVelocity;
    }



    public void setAngularVelocity(final float angularVelocity) {
        this.angularVelocity = angularVelocity;
    }



    public float getInertia() {
        return this.inertia;
    }



    public void setInertia(final float inertia) {
        this.inertia = inertia;
    }



    public float getLinerDrag() {
        return this.linerDrag;
    }



    public void setLinerDrag(final float linerDrag) {
        this.linerDrag = linerDrag;
    }



    public float getAngularDrag() {
        return this.angularDrag;
    }



    public void setAngularDrag(final float angularDrag) {
        this.angularDrag = angularDrag;
    }



    public Vector2 getCenterOfMass() {
        return this.centerOfMass;
    }



    public void setCenterOfMass(final Vector2 centerOfMass) {
        this.centerOfMass = centerOfMass;
    }



    public float getMass() {
        return this.mass;
    }



    public void setMass(final float mass) {
        this.mass = mass;
    }



    public boolean isUseGravity() {
        return this.useGravity;
    }



    public void setUseGravity(final boolean useGravity) {
        this.useGravity = useGravity;
    }



    public float getGravitationalScale() {
        return this.gravitationalScale;
    }



    public void setGravitationalScale(final float gravitationalScale) {
        this.gravitationalScale = gravitationalScale;
    }
}
