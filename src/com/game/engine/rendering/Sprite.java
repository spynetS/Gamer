// Generated by delombok at Sun Jan 19 19:44:26 CET 2025
package com.game.engine.rendering;

import com.game.engine.msc.Debug;
import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.IndexColorModel;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Hashtable;
import java.util.LinkedList;

public class Sprite {
    private String src = "";
    private BufferedImage image = null;

    public Sprite(String src) {
        super();
        this.src = src;
        loadSprite(src);
    }

    public Sprite() {
    }

    public Sprite(BufferedImage image) {
        this.image = image;
    }

    public static LinkedList<Sprite> getSprites(String src) {
        LinkedList<Sprite> sprites = new LinkedList<>();
        File folder = new File(src);
        // Verify that the folder exists and is a directory
        if (folder.exists() && folder.isDirectory()) {
            // Get a list of all files in the folder
            File[] files = folder.listFiles();
            // Iterate through the files and print their names
            for (File file : files) {
                if (file.isFile()) {
                    sprites.add(new Sprite("/tiles/" + file.getName()));
                }
            }
        } else {
            System.out.println("Invalid folder path");
        }
        return sprites;
    }

    public static LinkedList<Sprite> getSprites(String src, LinkedList<Rectangle> boxes) {

        LinkedList<Sprite> animation = new LinkedList<>();
        for (Rectangle r : boxes) {
            Sprite sprite = new Sprite();
            sprite.loadSprite(src);

            BufferedImage animationSprite = (sprite.getImage().getSubimage((int) (r.getX()), (int) (r.getY()), (int) r.getWidth(), (int) r.getHeight()));
            sprite.setImage(animationSprite);
            animation.add(sprite);
        }
        return animation;
    }

    public void loadSprite(String src) {
        Debug.startCount();
        BufferedImage sprite = null;
        try {
            InputStream in = this.getClass().getResourceAsStream(src);
            sprite = ImageIO.read(in);
        } catch (IOException e) {
            e.printStackTrace();
        }
        this.image = sprite;
    }



    public void setSrc(final String src) {
        this.src = src;
    }



    public String getSrc() {
        return this.src;
    }



    public BufferedImage getImage() {
        return this.image;
    }



    public void setImage(final BufferedImage image) {
        this.image = image;
    }
}
